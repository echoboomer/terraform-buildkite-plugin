#!/bin/bash

set -euo pipefail

#########
# SETUP #
#########

# Check for presence of required directories.
required_folders=(
  terraform
)

for dir in "${required_folders[@]}"; do
  if [[ -d $dir ]]; then
    echo "${dir} directory located."
  else
    echo "${dir} directory not found. Please make sure it is located in the project root. We looked in $(pwd)."
    exit 1
  fi
done

# We do this to cover cases where modules are stored in GitHub.
# Without this, the container hangs forever waiting for confirmation.
ENABLE_KEYSCAN=${BUILDKITE_PLUGIN_TERRAFORM_DISABLE_SSH_KEYSCAN:-}
KNOWN_HOSTS_FILE=${BUILDKITE_PLUGIN_TERRAFORM_KNOWN_HOSTS_LOCATION:-"$(pwd)/known_hosts"}

if [[ ! -f "$KNOWN_HOSTS_FILE" && -z $ENABLE_KEYSCAN ]]; then
  ssh-keyscan github.com >> $KNOWN_HOSTS_FILE
fi

# Reads either a value or a list from plugin config
function plugin_read_list() {
  prefix_read_list "BUILDKITE_PLUGIN_TERRAFORM_$1"
}

# Reads either a value or a list from the given env prefix
function prefix_read_list() {
  local prefix="$1"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i + 1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    echo "${!prefix}"
  fi
}

function terraform-bin() {
  local DOCKER_IMAGE="${IMAGE_NAME}:${VERSION}"

  docker_args=()

  docker_args+=(
    "--rm"
    "-it"
    "--entrypoint" "terraform"
    "-e" "SSH_AUTH_SOCK"
    "-v" "$SSH_AUTH_SOCK:$SSH_AUTH_SOCK"
    "-v" "$PWD:/svc"
    "-v" "$KNOWN_HOSTS_FILE:/root/.ssh/known_hosts"
  )

  extra_envs=()
  while read -r line; do
    [[ -n "$line" ]] && extra_envs+=("$line")
  done <<< "$(plugin_read_list ENV)"

  for e in ${extra_envs[@]-}; do
    docker_args+=("--env" "$e")
  done

  extra_volumes=()
  while read -r line; do
    [[ -n "$line" ]] && extra_volumes+=("$line")
  done <<< "$(plugin_read_list VOLUMES)"

  for v in ${extra_volumes[@]-}; do
    docker_args+=("-v" "$v")
  done

  docker_args+=(
    "-w" "/svc"
    "$DOCKER_IMAGE"
    "${@}"
  )

  if [[ "${DEBUG}" == true ]]; then
    echo "--- :terraform: :buildkite: :hammer_and_wrench: Debug on - show Docker command string."
    echo "docker run $(printf "%q " "${docker_args[@]}")"
  fi

  docker run $(printf "%q " "${docker_args[@]}")
}

function terraform-run() {
  local APPLY=${BUILDKITE_PLUGIN_TERRAFORM_APPLY:-false}
  local APPLY_MASTER=${BUILDKITE_PLUGIN_TERRAFORM_APPLY_MASTER:-false}
  local DESTROY=${BUILDKITE_PLUGIN_TERRAFORM_DESTROY:-false}
  local APPLY_ONLY=${BUILDKITE_PLUGIN_TERRAFORM_APPLY_ONLY:-false}
  local AUTO_CREATE_WORKSPACE=${BUILDKITE_PLUGIN_TERRAFORM_AUTO_CREATE_WORKSPACE:-true}
  local BUILDKITE_BRANCH=${BUILDKITE_BRANCH:-}
  local DEBUG=${BUILDKITE_PLUGIN_TERRAFORM_DEBUG:-false}
  local EXTRA_PLAN_ARGS=${BUILDKITE_PLUGIN_TERRAFORM_EXTRA_PLAN_ARGS:-}
  local IMAGE_NAME=${BUILDKITE_PLUGIN_TERRAFORM_IMAGE:-"hashicorp/terraform"}
  local NO_VALIDATE=${BUILDKITE_PLUGIN_TERRAFORM_NO_VALIDATE:-false}
  local REQUIRE_TFVAR_FILE=${BUILDKITE_PLUGIN_TERRAFORM_REQUIRE_TFVAR_FILE:-false}
  local SKIP_APPLY_NO_DIFF=${BUILDKITE_PLUGIN_TERRAFORM_SKIP_APPLY_NO_DIFF:-false}
  local TFVAR_FILENAME=${BUILDKITE_PLUGIN_TERRAFOMR_TFVAR_FILENAME:-}
  local USE_WORKSPACES=${BUILDKITE_PLUGIN_TERRAFORM_USE_WORKSPACES:-false}
  local VERSION=${BUILDKITE_PLUGIN_TERRAFORM_VERSION:-0.13.0}
  local WORKSPACE=${BUILDKITE_PLUGIN_TERRAFORM_WORKSPACE:-default}
  local WORKSPACE_METADATA_KEY=${BUILDKITE_PLUGIN_TERRAFORM_WORKSPACE_METADATA_KEY:-}

  # Set arguments for terraform init.
  args=()
  while read -r line; do
    [[ -n "$line" ]] && args+=("$line")
  done <<< "$(plugin_read_list INIT_ARGS)"

  if [[ "${DEBUG}" == true ]]; then
    echo "--- :terraform: :buildkite: :hammer_and_wrench: Debug on - list local variables."
    echo "APPLY: ${APPLY}"
    echo "APPLY_MASTER: ${APPLY_MASTER}"
    echo "DESTROY: ${DESTROY}"
    echo "APPLY_ONLY: ${APPLY_ONLY}"
    echo "AUTO_CREATE_WORKSPACE: ${AUTO_CREATE_WORKSPACE}"
    echo "BUILDKITE_BRANCH: ${BUILDKITE_BRANCH}"
    echo "EXTRA_PLAN_ARGS: ${EXTRA_PLAN_ARGS}"
    echo "IMAGE_NAME: ${IMAGE_NAME}"
    echo "INIT_ARGS: ${args[@]}"
    echo "NO_VALIDATE: ${NO_VALIDATE}"
    echo "SKIP_APPLY_NO_DIFF: ${SKIP_APPLY_NO_DIFF}"
    echo "USE_WORKSPACES: ${USE_WORKSPACES}"
    echo "VERSION: ${VERSION}"
    echo "WORKSPACE: ${WORKSPACE}"
    echo "WORKSPACE_METADATA_KEY ${WORKSPACE_METADATA_KEY}"
  fi

  cd terraform

  echo "+++ :terraform: :buildkite: :hammer_and_wrench: Setting up Terraform environment..."
  if [[ "${DEBUG}" == true ]]; then
    echo "Running init command string: terraform init ${args[@]}"
  fi

  terraform-bin init "${args[@]}"
  echo ""

  if [[ "${USE_WORKSPACES}" == true ]]; then
    if [[ -n ${WORKSPACE_METADATA_KEY} ]]; then
      WORKSPACE=$(buildkite-agent meta-data get "${WORKSPACE_METADATA_KEY}")
      echo "Overrode WORKSPACE with metadata key: ${WORKSPACE_METADATA_KEY}. Set WORKSPACE=${WORKSPACE}"
    fi
    if [[ "${AUTO_CREATE_WORKSPACE}" == true ]]; then
      terraform-bin workspace select ${WORKSPACE} || terraform-bin workspace new ${WORKSPACE}
    else
      terraform-bin workspace select ${WORKSPACE}
    fi
    echo ""
  fi

  if [[ "${NO_VALIDATE}" == false ]]; then
    terraform-bin validate
  fi

  if [[ "${APPLY_ONLY}" == false ]]; then
    echo "+++ :terraform: :buildkite: :hourglass: Running Terraform plan..."

    # preserve previous behaviour
    if [[ "${USE_WORKSPACES}" == true ]]; then
      TFVAR_FILENAME="${TFVAR_FILENAME:-$WORKSPACE-terraform.tfvars}"
    fi

    # now also allow for setting a tfvar file, if not using a workspace
    unset var_file_args
    if [[ "${REQUIRE_TFVAR_FILE}" == true ]]; then
      [[ -n "${TFVAR_FILENAME}" ]] || { echo "REQUIRE_TFVAR_FILE == true, but TFVAR_FILENAME not set!" ; exit 1;}
      [[ -e "${TFVAR_FILENAME}" ]] || { echo "TFVAR_FILENAME ${TFVAR_FILENAME} not found!" ; exit 1;}
      var_file_args="-var-file=${TFVAR_FILENAME}"
    fi
    #shellcheck disable=SC2086
    terraform-bin plan -input=false ${var_file_args:-} -out tfplan $EXTRA_PLAN_ARGS

    # Capture plan output for setting variables and passing as artifacts.
    terraform-bin show tfplan -no-color > tfplan.txt
    terraform-bin show -json tfplan > tfplan.json

    if grep -iFq "Plan: 0 to add, 0 to change, 0 to destroy." tfplan.txt; then
      echo ""
      echo "--- :terraform: :buildkite: :white_check_mark: Exporting tf_diff=false to agent metadata."
      buildkite-agent meta-data set "tf_diff" "false"
      export TF_DIFF=false
    else
      echo ""
      echo "--- :terraform: :buildkite: :white_check_mark: Exporting tf_diff=true to agent metadata."
      buildkite-agent meta-data set "tf_diff" "true"
      export TF_DIFF=true
    fi

    echo "--- :terraform: :buildkite: :floppy_disk: Listing directory contents for record keeping."
    ls -al .
  else
    export TF_DIFF=true
  fi

  tf_commands=()
  while read -r line; do
    [[ -n "$line" ]] && tf_commands+=("$line")
  done <<< "$(plugin_read_list COMMANDS)"

  if [ "${#tf_commands[@]}" -gt "0" ]; then

      for tf_cmd in "${tf_commands[@]-}"; do
        echo "+++ :terraform: :buildkite: :hourglass: Running Terraform $tf_cmd ..."
        terraform-bin $tf_cmd
      done

  elif [[ "${APPLY}" == true || "${APPLY_ONLY}" == true || ("${APPLY_MASTER}" == true && "${BUILDKITE_BRANCH}" == "master") ]]; then
    if [[ "${TF_DIFF}" == false && "${SKIP_APPLY_NO_DIFF}" == true ]]; then
      echo "--- :terraform: :buildkite: :zzz: Skipping apply step."
    else
      echo "+++ :terraform: :buildkite: :hourglass: Running Terraform apply based on calculated plan..."
      terraform-bin apply -input=false tfplan
    fi
  fi

  if [[ "${DESTROY}" == true ]]; then
    echo "+++ :terraform: :buildkite: :hourglass: Running Terraform destroy..."
    terraform-bin destroy -input=false -auto-approve
  fi
}

terraform-run
